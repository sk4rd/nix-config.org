
#+title: Sk4rd's NixOS Config in Org-Mode
#+property: header-args :mkdirp yes :comments link

[[./colors.png]]

This is my NixOS and HomeManager configuration using flakes, which is
written in Emacs' org-mode. It is an attempt to better structure my
config and create a place to edit and maintain configs for other
programs declaratively.

* Flake

This is the flake for managing inputs to my NixOS and HomeManager
config. The configs are defined as flake outputs.

#+begin_src nix :tangle flake.nix
  {
    description = "Sk4rd's NixOS & HomeManager Config";

    inputs = {
      nixpkgs.url = "github:NixOS/nixpkgs/nixos-24.11";
      home-manager.url = "github:nix-community/home-manager/release-24.11";
      home-manager.inputs.nixpkgs.follows = "nixpkgs";
      nixos-hardware.url = "github:NixOS/nixos-hardware";
      agenix.url = "github:ryantm/agenix";
    };

    outputs =
      { self, ... }@inputs:
      let
        system = "x86_64-linux";
        pkgs = import inputs.nixpkgs {
          inherit system;
          config.allowUnfree = true;
        };
      in
      {
        nixosConfigurations."laptop" = inputs.nixpkgs.lib.nixosSystem {
          inherit pkgs;
          modules = [
            ./hosts/laptop
            inputs.nixos-hardware.nixosModules.lenovo-thinkpad-z13-gen1
          ];
        };

        nixosConfigurations."desktop" = inputs.nixpkgs.lib.nixosSystem {
          inherit pkgs;
          modules = [
            ./hosts/desktop
            inputs.nixos-hardware.nixosModules.common-cpu-amd
            inputs.nixos-hardware.nixosModules.common-gpu-amd
            inputs.nixos-hardware.nixosModules.common-pc-ssd
          ];
        };

        homeConfigurations = {
        };
      };
  }
#+end_src

* NixOS

** Common Configuration

*** Generic

This contains the generic system configuration, such as time zone and
fonts.

#+begin_src nix :tangle hosts/common/generic.nix
  { ... }:

  {
    # Set the time zone
    time.timeZone = "Europe/Berlin";

    # Enable experimental nix features
    nix.settings.experimental-features = [
      "nix-command"
      "flakes"
    ];

    # Change font settings
    fonts = {
      enableDefaultPackages = true;
      packages = with pkgs; [
        (nerdfonts.override { fonts = [ "Iosevka" ]; })
      ];
      fontconfig = {
        enable = true;
        useEmbeddedBitmaps = true;
      };
      fontDir.enable = true;
    };

    # Do not change this after building your system
    system.stateVersion = "24.11";
  }
#+end_src

*** Bootloader

This enables and configures the systemd-boot loader.

#+begin_src nix :tangle hosts/common/boot.nix
  { ... }:

  {
    boot.loader = {
      efi.canTouchEfiVariables = true;
      systemd-boot = {
        enable = true;
        editor = false;
        configurationLimit = 30;
      };
    };
  }
#+end_src

*** Users

This defines the user configuration, including user groups and default
shell.

#+begin_src nix :tangle hosts/common/users.nix
  { config, pkgs, ... }:

  let
    username = "miko"; # Change this value to your own
    description = "Mikolaj Bajtkiewicz"; # Usually set to your name
  in
  {
    users.defaultUserShell = pkgs.zsh;
    users.users.${username} = {
      inherit description;
      isNormalUser = true;
      useDefaultShell = true;
      extraGroups = [
        "wheel"
        "dialout"
        (if config.virtualisation.docker.enable then "docker" else "")
      ];
    };
  }
#+end_src

*** Virtualisation

This configures virtualisation options like Docker and libvirtd.

#+begin_src nix :tangle hosts/common/virtualisation.nix
  { pkgs, ... }:

  {
    virtualisation = {
      libvirtd = {
        enable = true;
        qemu.ovmf = {
          enable = true;
          packages = with pkgs; [ OVMFFull.fd ];
        };
        qemu.swtpm.enable = true;
      };
      spiceUSBRedirection.enable = true;
      docker.enable = true;
    };
  }
#+end_src

*** AMDGPU

This section enables opencl and vulkan on amd gpus.

#+begin_src nix :tangle hosts/common/amdgpu.nix
  { ... }:

  {
    hardware.amdgpu = {
      opencl.enable = true;
      amdvlk.enable = true;
      amdvlk.support32Bit.enable = true;
    };
  }
#+end_src



** Laptop

This is my laptop specific configuration.

#+begin_src nix :tangle hosts/laptop/default.nix
  { ... }:

  {
    imports = [
      ../common/generic.nix
      ../common/boot.nix
      ../common/users.nix
      ../common/virtualisation.nix

      ./kernelModules.nix
      ./filesystem.nix
    ];
  }
#+end_src

*** Filesystem

This configures the file systems for the laptop, including boot and
root.

#+begin_src nix :tangle hosts/laptop/filesystems.nix
  { ... }:

  {
    # File system config
    fileSystems."/" = {
      device = "/dev/disk/by-uuid/bc1d0786-cf98-4955-b442-18076c604f58"; # Change this...
      fsType = "ext4";
    };

    fileSystems."/boot" = {
      device = "/dev/disk/by-uuid/4AB9-DD8D"; # ... and this value according to your disks
      fsType = "vfat";
      options = [
        "fmask=0077"
        "dmask=0077"
      ];
    };

    boot.supportedFilesystems = [ "ntfs" ];
  }
#+end_src

*** Kernel Modules

This includes kernel modules needed for specific hardware support.

#+begin_src nix :tangle hosts/laptop/kernelModules.nix

  { ... }:

  {
    boot.kernelModules = [ "kvm-amd" ];
    boot.initrd.availableKernelModules = [
      "nvme"
      "xhci_pci"
      "thunderbolt"
      "usb_storage"
      "sd_mod"
    ];
  }
#+end_src

* HomeManager

** Programs

*** Emacs

This is my init.el, which gets tangled directly into the =extraConfig=
option of my nix config.

**** Backup & Autosave Behavior

This changes the backup and autosave directories, so no annoying files
pop up in my projects.

#+name: backup-and-autosave
#+begin_src elisp
  ;; Backup directory in ~/.emacs.d/backups
  (let ((backup-dir "~/.emacs.d/backups"))
    (unless (file-exists-p backup-dir)
      (make-directory backup-dir))
    (setq backup-directory-alist `(("." . ,backup-dir))))

  ;; Autosave directory in ~/.emacs.d/autosaves
  (let ((autosave-dir "~/.emacs.d/autosaves"))
    (unless (file-exists-p autosave-dir)
      (make-directory autosave-dir))
    (setq auto-save-file-name-transforms
          `((".*" ,(concat autosave-dir "/\\1") t))))
#+end_src

**** Look & Feel

This sets the catpuccin theme, sets a font and then disables all gui
elements.

#+name: look-and-feel
#+begin_src elisp
  ;; Apply catppuccin theme
  (setq catppuccin-flavor 'mocha)
  (load-theme 'catppuccin t)

  ;; Set IBM Plex Mono font
  (set-frame-font "BlexMono Nerd Font 10" nil t)

  ;; Disable GUI elements
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

**** Tab Behavior

This sets the indenting mode to spaces instead of tabs and gives the
tabs a width of 4.

#+name: tab-behavior
#+begin_src elisp
  ;; Use spaces instead of tabs globally
  (setq-default indent-tabs-mode nil)

  ;; Set the default tab width to 4 spaces (optional, adjust as needed)
  (setq-default tab-width 4)
#+end_src

**** Code Editing

This section sets up emacs as a lightweight IDE with autocompletion.

#+name: code-editing
#+begin_src elisp
  ;; Set up modes for files
  (with-eval-after-load 'auto-mode-alist
    (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode)))

  ;; Set up auto completion with company-mode
  (autoload 'company "company-mode" "Company mode for text completion." t)
  (add-hook 'prog-mode-hook 'company-mode)
  (with-eval-after-load 'company
    (setq company-idle-delay 0.1)
    (setq company-minimum-prefix-length 2)
    (setq company-tooltip-align-annotations t)
    (add-to-list 'company-backends 'company-capf))

  ;; Set up eglot lsp
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '(nix-mode . ("${pkgs.nil}/bin/nil"))))

  (with-eval-after-load 'nix-mode
    (setq nix-nixfmt-bin "${pkgs.nixfmt-rfc-style}/bin/nixfmt")
    (add-hook 'nix-mode-hook 'eglot-ensure)
    (add-hook 'nix-mode-hook
              (lambda ()
                (add-hook 'before-save-hook #'nix-format-buffer nil t))))
#+end_src

**** Nix Config

Here I define the Emacs config for nix which includes packages.

#+begin_src nix :tangle home/common/emacs.nix :noweb yes
  { pkgs, ... }:

  {
    home.packages = with pkgs; [ nil ];
    programs.emacs = {
      enable = true;
      package = pkgs.emacs30-pgtk;
      extraPackages = epkgs: with epkgs; [
        markdown-mode
        company
        catppuccin-theme
        nix-mode
      ];
      extraConfig = ''
        <<backup-and-autosave>>

        <<look-and-feel>>

        <<tab-behavior>>

        <<code-editing>>
      '';
    };
  }
#+end_src
