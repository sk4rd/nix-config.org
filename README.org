#+title: Sk4rd's NixOS Config in Org-Mode
#+property: header-args :mkdirp yes :results silent

[[./colors.png]]

This file contains my NixOS and HomeManager configuration using
flakes, written in org-mode. The goal is to manage system and program
settings declaratively and keep everything well-structured.

* Flake

This flake manages dependencies (inputs) and defines configurations
(outputs) for NixOS and HomeManager.

** Inputs

Dependencies for the configuration, including:
- =nixpkgs=: The main Nix package source.
- =home-manager=: For user configurations.
- =nixos-hardware=: Hardware-specific settings.

#+name: flake-inputs
#+begin_src nix
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-24.11";
    home-manager.url = "github:nix-community/home-manager/release-24.11";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";
    nixos-hardware.url = "github:NixOS/nixos-hardware";
  };
#+end_src

** Outputs

Defines system (NixOS) and user (HomeManager) configurations as flake
outputs.

#+begin_src nix :tangle flake.nix :noweb yes
  {
    description = "Sk4rd's NixOS & HomeManager Config";

    <<flake-inputs>>

    outputs =
      { nixpkgs, home-manager, nixos-hardware, ... }:
      let
        <<system-and-packages>>

        <<extend-lib>>

        <<host-helper-function>>

        <<home-helper-function>>
      in
      {
        nixosConfigurations = mkHosts {
          "laptop".extraModules = [ nixos-hardware.nixosModules.lenovo-thinkpad-z13-gen1 ];
          "desktop".extraModules = [
            nixos-hardware.nixosModules.common-cpu-amd
            nixos-hardware.nixosModules.common-gpu-amd
            nixos-hardware.nixosModules.common-pc-ssd
          ];
        };

        homeConfigurations = mkHomes {
          "miko@laptop" = { };
          "miko@desktop" = { };
        };
      };
  }
#+end_src

*** System & Packages

Configures the system type and enables unfree software.

#+name: system-and-packages
#+begin_src nix
  system = "x86_64-linux";
  pkgs = import nixpkgs {
    inherit system;
    config.allowUnfree = true;
  };
#+end_src

*** Helper Functions

Helper functions simplify creating configurations for hosts and users.
 
**** Host Helper Function

Generates NixOS configurations for each host.

#+name: host-helper-function
#+begin_src nix
  mkHosts =
    systems:
    nixpkgs.lib.genAttrs (builtins.attrNames systems) (
      name:
      nixpkgs.lib.nixosSystem {
        inherit pkgs;
        modules = [ ./hosts/${name} ] ++ systems.${name}.extraModules or [ ];
        specialArgs = { inherit lib; hostname = name; }; # Pass hostname to modules
      }
    );
#+end_src

**** Home Helper Function

Generates HomeManager configurations for each user.

#+name: home-helper-function
#+begin_src nix
  mkHomes =
    users:
    nixpkgs.lib.genAttrs (builtins.attrNames users) (
      name:
      let
        parts = builtins.split "@" name;
        username = builtins.elemAt parts 0;
        hostname = builtins.elemAt parts 2;
      in
      home-manager.lib.homeManagerConfiguration {
        inherit pkgs;
        modules = [ ./home/${username}/${hostname} ] ++ users.${name}.extraModules or [ ];
        extraSpecialArgs = { inherit lib username hostname; }; # Pass username and hostname to modules
      }
    );
#+end_src

*** Extending the Library

#+name: extend-lib
#+begin_src nix
  mkLib = nixpkgs:
    nixpkgs.lib.extend (final: prev: (import ./lib final) // home-manager.lib);

  lib = mkLib nixpkgs;
#+end_src

* Nix Lib

#+begin_src nix :tangle lib/default.nix
  lib: {
    enableAll = builtins.mapAttrs (name: value: { enable = true; });
  }
#+end_src

* NixOS

** Common Host Configuration

*** Generic

This contains the generic system configuration, such as time zone and
fonts.

#+begin_src nix :tangle hosts/common/generic.nix
  { pkgs, ... }:

  {
    # Set the time zone
    time.timeZone = "Europe/Berlin";

    # Enable experimental nix features
    nix.settings.experimental-features = [
      "nix-command"
      "flakes"
    ];

    # Change font settings
    fonts = {
      enableDefaultPackages = true;
      packages = with pkgs; [
        (nerdfonts.override { fonts = [ "Iosevka" ]; })
      ];
      fontconfig = {
        enable = true;
        useEmbeddedBitmaps = true;
      };
      fontDir.enable = true;
    };

    # Do not change this after building your system
    system.stateVersion = "24.11";
  }
#+end_src

*** Bootloader

This enables and configures the systemd-boot loader.

#+begin_src nix :tangle hosts/common/boot.nix
  { ... }:

  {
    boot.loader = {
      efi.canTouchEfiVariables = true;
      systemd-boot = {
        enable = true;
        editor = false;
        configurationLimit = 30;
      };
    };
  }
#+end_src

*** Users

This defines the user configuration, including user groups and default
shell.

#+begin_src nix :tangle hosts/common/users.nix
  { config, pkgs, ... }:

  let
    username = "miko"; # Change this value to your own
    description = "Mikolaj Bajtkiewicz"; # Usually set to your name
  in
  {
    users.defaultUserShell = pkgs.zsh;
    users.users.${username} = {
      inherit description;
      isNormalUser = true;
      useDefaultShell = true;
      extraGroups = [
        "wheel"
        "dialout"
        (if config.networking.networkmanager.enable then "networkmanager" else "")
        (if config.virtualisation.docker.enable then "docker" else "")
      ];
    };

    # Give the user the password 'test' in a vm
    virtualisation.vmVariant = {
      users.users.${username}.password = "test";
    };
  }
#+end_src

*** Shell

#+begin_src nix :tangle hosts/common/shell.nix
  { ... }:

  {
    programs.zsh = {
      enable = true;
      enableCompletion = true;
      autosuggestions.enable = true;
      syntaxHighlighting.enable = true;
      ohMyZsh = {
        enable = true;
        theme = "candy";
        plugins = [
          "sudo"
          "git"
          "z"
        ];
      };
    };
  }
#+end_src

*** AMDGPU

This section enables opencl and vulkan on amd gpus.

#+begin_src nix :tangle hosts/common/amdgpu.nix
  { ... }:

  {
    hardware.amdgpu = {
      opencl.enable = true;
      amdvlk.enable = true;
      amdvlk.support32Bit.enable = true;
    };
  }
#+end_src

*** Networking

This is the networking setup.

#+begin_src nix :tangle hosts/common/networking.nix
  { ... }:

  {
    networking.networkmanager.enable = true;
    networking.wireguard.enable = true;
    networking.firewall.enable = true;
  }
#+end_src

*** Bluetooth

#+begin_src nix :tangle hosts/common/bluetooth.nix
  { ... }:

  {
    hardware.bluetooth = {
      enable = true;
      powerOnBoot = true;
      settings.General = {
        ControllerMode = "dual";
        FastConnectable = true;
        Experimental = true;
      };
    };
  }
#+end_src

*** Virtualisation

This configures virtualisation options like Docker and libvirtd.

#+begin_src nix :tangle hosts/common/virtualisation.nix
  { pkgs, ... }:

  {
    virtualisation = {
      libvirtd = {
        enable = true;
        qemu.ovmf = {
          enable = true;
          packages = with pkgs; [ OVMFFull.fd ];
        };
        qemu.swtpm.enable = true;
      };
      spiceUSBRedirection.enable = true;
      docker.enable = true;
    };
  }
#+end_src
*** Controllers

#+begin_src nix :tangle hosts/common/controllers.nix
  { ... }:

  {
    # XBOX Controller
    hardware.xone.enable = true;
    # Steam Controller
    hardware.steam-hardware.enable = true;
  }
#+end_src

*** Hyprland Desktop Environment

#+begin_src nix :tangle hosts/common/hyprland.nix
  { pkgs, ... }:

  {
    programs.hyprland.enable = true;
    programs.hyprlock.enable = true;

    services.gvfs.enable = true;
    services.udisks2.enable = true;
    services.greetd = {
      enable = true;
      settings = {
        default_session = {
          command = "${pkgs.greetd.tuigreet}/bin/tuigreet -tr --cmd '${pkgs.hyprland}/bin/Hyprland'";
          user = "greeter";
        };
      };
    };
    services.pipewire = {
      enable = true;
      alsa.enable = true;
      alsa.support32Bit = true;
      pulse.enable = true;
      jack.enable = true;
      wireplumber.enable = true;
      extraConfig.pipewire."10-clock-rate" = {
        "context.properties" = {
          "default.clock.rate" = 192000;
          "default.clock.allowed.rates" = [
            192000
            96000
            48000
            44100
          ];
        };
      };
    };
  }
#+end_src

*** Printing

#+begin_src nix :tangle hosts/common/printing.nix
  { pkgs, ... }:

  {
    # Cupsd configuration for printing
    services.printing = {
      enable = true;
      drivers = with pkgs; [ postscript-lexmark ];
    };
  }
#+end_src

** Laptop

This is my laptop specific configuration.

#+begin_src nix :tangle hosts/laptop/default.nix
  { ... }:

  {
    imports = [
      ../common/generic.nix
      ../common/boot.nix
      ../common/users.nix
      ../common/shell.nix
      ../common/amdgpu.nix
      ../common/networking.nix
      ../common/bluetooth.nix
      ../common/virtualisation.nix
      ../common/controllers.nix
      ../common/hyprland.nix
      ../common/printing.nix

      ./kernelModules.nix
      ./filesystem.nix
    ];
  }
#+end_src

*** Filesystem

This configures the file systems for the laptop, including boot and
root.

#+begin_src nix :tangle hosts/laptop/filesystem.nix
  { ... }:

  {
    # File system config
    fileSystems."/" = {
      device = "/dev/disk/by-uuid/bc1d0786-cf98-4955-b442-18076c604f58"; # Change this...
      fsType = "ext4";
    };

    fileSystems."/boot" = {
      device = "/dev/disk/by-uuid/4AB9-DD8D"; # ... and this value according to your disks
      fsType = "vfat";
      options = [
        "fmask=0077"
        "dmask=0077"
      ];
    };

    boot.supportedFilesystems = [ "ntfs" ];
  }
#+end_src

*** Kernel Modules

This includes kernel modules needed for specific hardware support.

#+begin_src nix :tangle hosts/laptop/kernelModules.nix

  { ... }:

  {
    boot.kernelModules = [ "kvm-amd" ];
    boot.initrd.availableKernelModules = [
      "nvme"
      "xhci_pci"
      "thunderbolt"
      "usb_storage"
      "sd_mod"
    ];
  }
#+end_src

** Desktop

This is my desktop specific configuration.

#+begin_src nix :tangle hosts/desktop/default.nix
  { ... }:

  {
    imports = [
      ../common/generic.nix
      ../common/boot.nix
      ../common/users.nix
      ../common/shell.nix
      ../common/amdgpu.nix
      ../common/networking.nix
      ../common/virtualisation.nix
      ../common/controllers.nix
      ../common/hyprland.nix
      ../common/printing.nix

      ./filesystem.nix
    ];
  }
#+end_src

*** Filesystem

#+begin_src nix :tangle hosts/desktop/filesystem.nix
  { ... }:

  {
    fileSystems."/" = {
      device = "/dev/disk/by-uuid/776417cb-937b-45bc-b6e0-026615e9da40";
      fsType = "ext4";
    };

    fileSystems."/boot" = {
      device = "/dev/disk/by-uuid/C4FA-A3EF";
      fsType = "vfat";
    };

    swapDevices = [
      {
        device = "/.swapfile";
        size = 32 * 1024;
      }
    ];
  }
#+end_src

* HomeManager

** Common Home Configuration

#+begin_src nix :tangle home/common/default.nix
  { username, ... }:

  {
    imports = [
      ./programs.nix
    ];

    # Basic HomeManager config
    home = {
      username = username;
      homeDirectory = "/home/${username}";
      # Do not change this
      stateVersion = "24.11";
    };

    # Let HomeManager install itself
    programs.home-manager.enable = true;

    # Let fonts be managed by HomeManager
    fonts.fontconfig.enable = true;

    # Reload services on config switch
    systemd.user.startServices = "sd-switch";

  }
#+end_src

*** Programs

#+begin_src nix :tangle home/common/programs.nix
  { lib, ... }:

  {
    # Imports of programs with larger configs
    imports = [
      ./emacs.nix
      ./git.nix
      ./hyprland.nix
      ./kitty.nix
      ./lf.nix
    ];

    # Programs with short or simple configs which are automatically enabled
    programs = lib.enableAll {
      bat = { };
      btop = { };
      imv = { };
      mpv = { };
      zathura = { };
      direnv.nix-direnv.enable = true;
      gpg.scdaemonSettings.disable-ccid = true; # Disable the integrated support for CCID compliant readers
      ssh.extraConfig = "IdentityAgent /run/user/1000/gnupg/S.gpg-agent.ssh"; # Use the GPG agent for SSH authentication
    };
  }
#+end_src

**** Git

#+begin_src nix :tangle home/common/git.nix
  { pkgs, ... }:

  let
    userEmail = "mikolaj.ba@pm.me"; # Change this to your email
    userName = "Mikolaj Bajtkiewicz"; # Change this to your name
    signingKey = "AFA1F0631CECE62F"; # Set to your own key (or remove)
  in
  {
    programs.git = {
      inherit userEmail userName;

      enable = true;
      lfs.enable = true;
      package = pkgs.gitFull;

      # Optional
      signing = {
        signByDefault = true;
        key = signingKey;
      };
    };
  }
#+end_src

**** Kitty

#+begin_src nix :tangle home/common/kitty.nix
  { pkgs, ... }:

  {
    programs.kitty = {
      enable = true;
      shellIntegration.enableZshIntegration = true;

      font = {
        package = (pkgs.nerdfonts.override { fonts = [ "IBMPlexMono" ]; });
        name = "BlexMono Nerd Font";
        size = 10;
      };

      settings = {
        enable_audio_bell = false;
        window_margin_width = 8;
      };

      extraConfig = ''
        background_opacity 0.85
      '';
    };
  }
#+end_src

**** LF

#+begin_src nix :tangle home/common/lf.nix
  { config, pkgs, ... }:

  let
     userDirs = config.xdg.userDirs;
  in
  {
    # LF terminal file manager configuration
    programs.lf = {
      enable = true;
      keybindings = {
        "." = "set hidden!";
        gr = "cd /";
        gh = "cd ${config.home.homeDirectory}";
        gdl = "cd ${userDirs.download}";
        gdo = "cd ${userDirs.documents}";
        gp = "cd ${userDirs.pictures}";
        gv = "cd ${userDirs.videos}";
        gm = "cd /run/media/${config.home.username}";
      };
      settings = {
        drawbox = true;
        icons = true;
      };
      extraConfig = ''
        set previewer ${pkgs.ctpv}/bin/ctpv
        set cleaner ${pkgs.ctpv}/bin/ctpvclear
        &${pkgs.ctpv}/bin/ctpv -s $id
        &${pkgs.ctpv}/bin/ctpvquit $id
      '';
    };
  }
#+end_src

**** Emacs

This is my init.el, which gets tangled directly into the =extraConfig=
option of my nix config.

***** Backup & Autosave Behavior

This changes the backup and autosave directories, so no annoying files
pop up in my projects.

#+name: backup-and-autosave
#+begin_src elisp
  ;; Backup directory in ~/.emacs.d/backups
  (let ((backup-dir "~/.emacs.d/backups"))
    (unless (file-exists-p backup-dir)
      (make-directory backup-dir))
    (setq backup-directory-alist `(("." . ,backup-dir))))

  ;; Autosave directory in ~/.emacs.d/autosaves
  (let ((autosave-dir "~/.emacs.d/autosaves"))
    (unless (file-exists-p autosave-dir)
      (make-directory autosave-dir))
    (setq auto-save-file-name-transforms
          `((".*" ,(concat autosave-dir "/\\1") t))))
#+end_src

***** Look & Feel

This sets the catpuccin theme, sets a font and then disables all gui
elements.

#+name: look-and-feel
#+begin_src elisp
  ;; Apply catppuccin theme
  (setq catppuccin-flavor 'mocha)
  (load-theme 'catppuccin t)

  ;; Set IBM Plex Mono font
  (set-frame-font "BlexMono Nerd Font 10" nil t)

  ;; Disable GUI elements
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

***** Tab Behavior

This sets the indenting mode to spaces instead of tabs and gives the
tabs a width of 4.

#+name: tab-behavior
#+begin_src elisp
  ;; Use spaces instead of tabs globally
  (setq-default indent-tabs-mode nil)

  ;; Set the default tab width to 4 spaces (optional, adjust as needed)
  (setq-default tab-width 4)
#+end_src

***** Code Editing

This section sets up emacs as a lightweight IDE with autocompletion.

#+name: code-editing
#+begin_src elisp
  ;; Set up modes for files
  (with-eval-after-load 'auto-mode-alist
    (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode)))

  ;; Set up auto completion with company-mode
  (autoload 'company "company-mode" "Company mode for text completion." t)
  (with-eval-after-load 'company
    (setq company-idle-delay 0.1)
    (setq company-minimum-prefix-length 2)
    (setq company-tooltip-align-annotations t)
    (add-to-list 'company-backends 'company-capf))
  (add-hook 'prog-mode-hook 'company-mode)

  ;; Set up eglot lsp
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '(nix-mode . ("${pkgs.nil}/bin/nil"))))

  (with-eval-after-load 'nix-mode
    (setq nix-nixfmt-bin "${pkgs.nixfmt-rfc-style}/bin/nixfmt")
    (add-hook 'nix-mode-hook 'eglot-ensure)
    (add-hook 'nix-mode-hook
              (lambda ()
                (add-hook 'before-save-hook #'nix-format-buffer nil t))))

  ;; Line numbers
  (autoload 'display-line-numbers-mode "display-line-numbers" "View line numbers." t)
  (with-eval-after-load 'display-line-numbers
    (setq display-line-numbers-type 'relative))
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  ;; Remove trailing whitespace
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

***** Nix Config

Here I define the Emacs config for nix which includes packages.

#+begin_src nix :tangle home/common/emacs.nix :noweb yes
  { pkgs, ... }:

  {
    home.packages = with pkgs; [ nil ];
    programs.emacs = {
      enable = true;
      package = pkgs.emacs30-pgtk;
      extraPackages = epkgs: with epkgs; [
        markdown-mode
        company
        catppuccin-theme
        nix-mode
        magit
      ];
      extraConfig = ''
        <<backup-and-autosave>>

        <<look-and-feel>>

        <<tab-behavior>>

        <<code-editing>>
      '';
    };
  }
#+end_src

**** Hyprland

#+begin_src nix :tangle home/common/hyprland.nix
  { pkgs, ... }:

  {
    wayland.windowManager.hyprland = {
      enable = true;

      settings = {
        # Environment variables
        env = [
          "XCURSOR_THEME,Bibata-Modern-Classic"
          "XCURSOR_SIZE,24"
        ];

        # Autostarted programs
        exec-once = [ "${pkgs.polkit_gnome}/libexec/polkit-gnome-authentication-agent-1" ];

        # Modifier key set to SUPER
        "$mod" = "SUPER";

        # Keybindings
        bind = [
          # Programs
          "$mod, Q, exec, kitty"
          "$mod, R, exec, tofi-drun | bash"
          "$mod, W, exec, brave"
          "$mod, E, exec, kitty -e hx"
          "$mod, F, exec, nautilus"
          "$mod, N, exec, logseq"

          # Screenshot
          "$mod SHIFT, S, exec, ${pkgs.grim}/bin/grim -g \"$(${pkgs.slurp}/bin/slurp -d)\" - | ${pkgs.wl-clipboard}/bin/wl-copy"

          # Lock screen
          "$mod ALT, L, exec, loginctl lock-session"

          # Workspace navigation/window movement
          "$mod, 1, workspace, 1"
          "$mod, 2, workspace, 2"
          "$mod, 3, workspace, 3"
          "$mod, 4, workspace, 4"
          "$mod, 5, workspace, 5"
          "$mod, 6, workspace, 6"
          "$mod, 7, workspace, 7"
          "$mod, 8, workspace, 8"
          "$mod, 9, workspace, 9"
          "$mod, 0, workspace, 10"
          "$mod, grave, togglespecialworkspace, magic"

          "$mod SHIFT, 1, movetoworkspace, 1"
          "$mod SHIFT, 2, movetoworkspace, 2"
          "$mod SHIFT, 3, movetoworkspace, 3"
          "$mod SHIFT, 4, movetoworkspace, 4"
          "$mod SHIFT, 5, movetoworkspace, 5"
          "$mod SHIFT, 6, movetoworkspace, 6"
          "$mod SHIFT, 7, movetoworkspace, 7"
          "$mod SHIFT, 8, movetoworkspace, 8"
          "$mod SHIFT, 9, movetoworkspace, 9"
          "$mod SHIFT, 0, movetoworkspace, 10"
          "$mod SHIFT, grave, movetoworkspace, special:magic"

          # Window navigation/movement

          # VIM binds
          "$mod, h, movefocus, l"
          "$mod, l, movefocus, r"
          "$mod, k, movefocus, u"
          "$mod, j, movefocus, d"

          "$mod SHIFT, h, movewindow, l"
          "$mod SHIFT, l, movewindow, r"
          "$mod SHIFT, k, movewindow, u"
          "$mod SHIFT, j, movewindow, d"

          # Arrow binds
          "$mod, Left, movefocus, l"
          "$mod, Right, movefocus, r"
          "$mod, Up, movefocus, u"
          "$mod, Down, movefocus, d"

          "$mod SHIFT, Left, movewindow, l"
          "$mod SHIFT, Right, movewindow, r"
          "$mod SHIFT, Up, movewindow, u"
          "$mod SHIFT, Down, movewindow, d"

          # Window management
          "$mod SHIFT, C, killactive"
          "$mod SHIFT, F, fullscreen"
          "$mod, V, togglefloating,"
          "$mod, RETURN, layoutmsg, swapwithmaster"
        ];

        # Repeatable bindings
        binde = [
          ",XF86AudioRaiseVolume, exec, wpctl set-volume @DEFAULT_SINK@ 5%+"
          ",XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_SINK@ 5%-"
        ];

        # Mouse bindings
        bindm = [
          # Window resizing
          "$mod, mouse:272, movewindow"
          "$mod, mouse:273, resizewindow"
        ];

        # Input device configuration
        input = {
          kb_layout = "us,de";
          kb_options = "grp:win_space_toggle"; # Toggle layout with SUPER + Space
          follow_mouse = 1;
          accel_profile = "flat"; # Disable pointer acceleration
        };

        cursor = {
          no_hardware_cursors = true;
        };

        # Settings regarding looks
        general = {
          gaps_in = 5;
          gaps_out = 20;
          border_size = 3;
          layout = "master";
          allow_tearing = false;

          "col.inactive_border" = "$base";
          "col.active_border" = "$accent";
        };

        # Settings regarding decoration
        decoration = {
          rounding = 10;

          # Enable blurring of transparent elements
          blur = {
            enabled = true;
            size = 4;
            passes = 1;
            vibrancy = "0.17";
          };
        };

        # Settings regarding animation
        animations = {
          enabled = true;
          # Bezier curve definition
          bezier = "myBezier, 0.05, 0.9, 0.1, 1.05";

          # Animation defintions
          animation = [
            "windows, 1, 7, myBezier"
            "windowsOut, 1, 7, default, popin 80%"
            "border, 1, 10, default"
            "borderangle, 1, 8, default"
            "fade, 1, 7, default"
            "workspaces, 1, 6, default"
          ];
        };

        # Window rules
        windowrule = [
          "float,^(steam)$"
          "float,^(org.kde.polkit-kde-authentication-agent-1)$"
        ];
      };
      extraConfig = ''
        # Submap for window resizing
        bind=ALT, R, submap, resize

        submap=resize

        # Sets repeatable binds for resizing active window
        binde=, h, resizeactive, -20 0
        binde=, l, resizeactive, 20 0
        binde=, k, resizeactive, 0 -20
        binde=, j, resizeactive, 0 20
        bind=, escape, submap, reset

        submap=reset
      '';
    };
  }
#+end_src

** miko@desktop

Configuration specific to my desktop.

#+begin_src nix :tangle home/miko/desktop/default.nix
  { ... }:

  {
    imports = [ ../../common ];
  }
#+end_src

** miko@laptop

Configuration specific to my laptop.

#+begin_src nix :tangle home/miko/laptop/default.nix
  { ... }:

  {
    imports = [ ../../common ];
  }
#+end_src
